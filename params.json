{"name":"Ihe-iti","tagline":"Java codegen for the IHE ITI profiles","body":"### Welcome to IHE-ITI.\r\nThis project aims to make it simpler for teams using java & other jvm languages to build stuff based on IHE's IT Infrastructure profiles. \r\n\r\n* Yes, they do publish WSDLs; but many of their wsdls are not even valid xml.\r\n* Yes, codegen is easy; but mixed content, and jaxb elements will get messy.\r\n* Yes there's Open eHealth; but it's an opinionated framework.\r\n\r\nTo write a client, this is all you need.\r\nIf you want to build a server, you need to know enough about CXF or Metro; and use this for your interfaces.\r\n\r\n### Writing a client\r\nHere's a working *XDS.b Document Repository* client:\r\n\r\n``` groovy\r\n@Grapes([\r\n  @Grab('com.github.rahulsom:ihe-iti:0.4'),\r\n])\r\n\r\nimport ihe.iti.xds_b._2007.*\r\nimport javax.xml.ws.*\r\nimport javax.xml.ws.soap.*\r\n\r\ndef wsdl = this.class.getResource('/iti/wsdl/XDS.b_DocumentRepository.wsdl')\r\nService service = new DocumentRepositoryService(wsdl)\r\ndef port = service.getDocumentRepositoryPortSoap12(\r\n    new AddressingFeature(true, true),\r\n    new MTOMFeature(true),\r\n    new RespectBindingFeature(true)\r\n)\r\nBindingProvider bp = port\r\n\r\nbp.requestContext[BindingProvider.ENDPOINT_ADDRESS_PROPERTY] =\r\n    'http://hit-testing.nist.gov:12080/xdstools2/sim/6d39cc7d-8ec7-4547-b506-f9b5155ad211/rep/ret'\r\n\r\ndef request = new RetrieveDocumentSetRequestType().\r\n    withDocumentRequest(\r\n        new RetrieveDocumentSetRequestType.DocumentRequest().\r\n            withDocumentUniqueId('123').\r\n            withRepositoryUniqueId('1.2.3.4')\r\n    )\r\n\r\nprintln \"Request created\"\r\n```\r\n\r\nExecuting asynchronously with a `Response<ReturnType>`\r\n\r\n``` groovy\r\ndef response = port.documentRepositoryRetrieveDocumentSetAsync(request)\r\nprintln \"response<...> executed\"\r\n...\r\nresponse.get()\r\nprintln \"response<...> complete: ${response.get().registryResponse.status}\"\r\n```\r\n\r\nExecuting asynchronously with a `AsyncHandler<ReturnType>`\r\n\r\n``` groovy\r\ndef future = port.documentRepositoryRetrieveDocumentSetAsync(request, new AsyncHandler<RetrieveDocumentSetResponseType>() {\r\n  @Override\r\n  void handleResponse(Response<RetrieveDocumentSetResponseType> res) {\r\n    println \"future<...> returned: ${res.get().registryResponse.status}\"\r\n  }\r\n})\r\nprintln \"future<...> executed\"\r\n...\r\nfuture.get()\r\nprintln \"future<...> complete: ${future.get().registryResponse.status}\"\r\n```\r\n\r\nExecuting synchronously like normal people do\r\n\r\n``` groovy\r\ndef resp = port.documentRepositoryRetrieveDocumentSet(request)\r\nprintln \"Sync returned: ${resp.registryResponse.status}\"\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Authors and Contributors\r\nRahul Somasunderam (@rahulsom)\r\n\r\n### Support or Contact\r\nUse the [Mailing List](https://groups.google.com/d/forum/ihe-iti).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}